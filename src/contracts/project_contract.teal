from pyteal import *

def approval_program():
    # Clés de l'état global et local
    project_id = Bytes("project_id")
    project_owner = Bytes("owner")
    project_status = Bytes("status")
    winning_bid_id = Bytes("winning_bid_id")
    funding_goal = Bytes("funding_goal")
    total_contributed = Bytes("total_contributed")
    current_milestone = Bytes("current_milestone")
    milestones = Bytes("milestones")
    project_budget_total = Bytes("budget_total")

    # Statuts possibles
    STATUS_BIDDING = Int(0)
    STATUS_FUNDING = Int(1)
    STATUS_IN_PROGRESS = Int(2)
    STATUS_CANCELLED = Int(3)
    STATUS_COMPLETED = Int(4)

    # Restriction au créateur
    def is_creator():
        return Txn.sender() == App.globalGet(project_owner)

    # Soumission de projet
    def submit_project():
        return Seq([
            App.globalPut(project_id, Txn.application_id()),
            App.globalPut(project_owner, Txn.sender()),
            App.globalPut(project_status, STATUS_BIDDING),
            Approve()
        ])

    # Fonction pour soumettre un devis
    def submit_bid():
        bid_id = Txn.application_args[1]
        bid_amount = Btoi(Txn.application_args[2])
        return Seq([
            Assert(App.globalGet(project_status) == STATUS_BIDDING),
            App.globalPut(Bytes(f"bid_{bid_id}_amount"), bid_amount),
            Approve()
        ])

    # Fonction de vote avec vérification
    def vote_for_bid():
        bid_id = Txn.application_args[1]
        already_voted = App.localGetEx(Int(0), App.id(), Concat(Bytes("voted_"), bid_id))

        return Seq([
            Assert(App.globalGet(project_status) == STATUS_BIDDING),
            Assert(already_voted.hasValue() == Int(0)),  # Aucun vote antérieur pour ce devis
            App.localPut(Int(0), Concat(Bytes("voted_"), bid_id), Int(1)),  # Marque ce devis comme voté
            App.globalPut(Concat(Bytes("votes_"), bid_id), App.globalGet(Concat(Bytes("votes_"), bid_id)) + Int(1)),
            Approve()
        ])

    # Fonction réservée au créateur pour sélectionner le devis gagnant
    def select_winning_bid():
        bid_id = Txn.application_args[1]
        return Seq([
            Assert(is_creator()),
            Assert(App.globalGet(project_status) == STATUS_BIDDING),
            App.globalPut(winning_bid_id, bid_id),
            App.globalPut(project_status, STATUS_FUNDING),
            Approve()
        ])

    # Contribution avec preuve de don
    def contribute():
        donor_id = Txn.sender()
        amount = Gtxn[1].amount()
        return Seq([
            Assert(App.globalGet(project_status) == STATUS_FUNDING),
            App.localPut(donor_id, Bytes("contribution"), amount),
            App.globalPut(total_contributed, App.globalGet(total_contributed) + amount),
            Approve()
        ])

    # Validation de milestone par le créateur uniquement
    def validate_milestone():
        milestone_id = Btoi(Txn.application_args[1])
        milestone_cost = Btoi(Txn.application_args[2])
        return Seq([
            Assert(is_creator()),  # Seul le créateur peut valider les milestones
            Assert(App.globalGet(project_status) == STATUS_IN_PROGRESS),
            Assert(milestone_id == App.globalGet(current_milestone)),
            App.globalPut(total_contributed, App.globalGet(total_contributed) - milestone_cost),
            App.globalPut(current_milestone, App.globalGet(current_milestone) + Int(1)),
            Approve()
        ])

    # Finalisation du projet par le créateur
    def complete_project():
        return Seq([
            Assert(is_creator()),
            Assert(App.globalGet(total_contributed) >= App.globalGet(funding_goal)),
            App.globalPut(project_status, STATUS_COMPLETED),
            Approve()
        ])

    program = Cond(
        [Txn.application_id() == Int(0), submit_project()],
        [Txn.on_completion() == OnComplete.NoOp, Cond(
            [Txn.application_args[0] == Bytes("submit_bid"), submit_bid()],
            [Txn.application_args[0] == Bytes("vote_for_bid"), vote_for_bid()],
            [Txn.application_args[0] == Bytes("select_winning_bid"), select_winning_bid()],
            [Txn.application_args[0] == Bytes("contribute"), contribute()],
            [Txn.application_args[0] == Bytes("validate_milestone"), validate_milestone()],
            [Txn.application_args[0] == Bytes("complete_project"), complete_project()]
        )]
    )

    return program

def clear_state_program():
    return Approve()

if __name__ == "__main__":
    compiled_approval = compileTeal(approval_program(), mode=Mode.Application, version=5)
    compiled_clear = compileTeal(clear_state_program(), mode=Mode.Application, version=5)
    with open("approval.teal", "w") as f:
        f.write(compiled_approval)
    with open("clear.teal", "w") as f:
        f.write(compiled_clear)
